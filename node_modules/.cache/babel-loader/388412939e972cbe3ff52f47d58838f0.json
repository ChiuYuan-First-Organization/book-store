{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCartState = {\n  cartIsShown: false,\n  notification: null,\n  items: []\n};\nconst cartSlice = createSlice({\n  name: \"cartReducer\",\n  initialState: initialCartState,\n  reducers: {\n    cartToggle(state) {\n      state.cartIsShown = !state.cartIsShown;\n    },\n\n    showNotification(state, action) {\n      state.notification = {\n        status: action.payload.status,\n        title: action.payload.title,\n        message: action.payload.message\n      };\n    },\n\n    addItem(state, action) {\n      const existingItem = state.items.find(item => item.title === action.payload.title);\n\n      if (existingItem) {\n        existingItem.quantity += action.payload.quantity;\n      } else {\n        state.items.push(action.payload);\n      }\n    },\n\n    removeItem(state, action) {\n      const existingItem = state.items.find(item => item.title === action.payload.title);\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.title !== action.payload.title);\n      } else {\n        existingItem.quantity--;\n      }\n    }\n\n  }\n});\n\nconst sendCartData = cart => {\n  return async dispatch => {\n    dispatch(cartSlice.actions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data!\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://react-http-e32d2-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed!\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(cartActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sent cart data successfully!\"\n      }));\n    } catch (error) {\n      dispatch(cartActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sending cart data failed!\"\n      }));\n    }\n  };\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/adam/Downloads/01-starting-project 5/src/store/cart.js"],"names":["createSlice","initialCartState","cartIsShown","notification","items","cartSlice","name","initialState","reducers","cartToggle","state","showNotification","action","status","payload","title","message","addItem","existingItem","find","item","quantity","push","removeItem","filter","sendCartData","cart","dispatch","actions","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","cartActions","error","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialCartState = {\n  cartIsShown: false,\n  notification: null,\n  items: [],\n};\n\nconst cartSlice = createSlice({\n  name: \"cartReducer\",\n  initialState: initialCartState,\n  reducers: {\n    cartToggle(state) {\n      state.cartIsShown = !state.cartIsShown;\n    },\n    showNotification(state, action) {\n      state.notification = {\n        status: action.payload.status,\n        title: action.payload.title,\n        message: action.payload.message,\n      };\n    },\n    addItem(state, action) {\n      const existingItem = state.items.find(\n        (item) => item.title === action.payload.title\n      );\n      if (existingItem) {\n        existingItem.quantity += action.payload.quantity;\n      } else {\n        state.items.push(action.payload);\n      }\n    },\n    removeItem(state, action) {\n      const existingItem = state.items.find(\n        (item) => item.title === action.payload.title\n      );\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(\n          (item) => item.title !== action.payload.title\n        );\n      } else {\n        existingItem.quantity--;\n      }\n    },\n  },\n});\n\nconst sendCartData = (cart) => {\n  return async (dispatch) => {\n    dispatch(\n      cartSlice.actions.showNotification({\n        status: \"pending\",\n        title: \"Sending...\",\n        message: \"Sending cart data!\",\n      })\n    );\n\n    const sendRequest = async () => {\n      const response = await fetch(\n        \"https://react-http-e32d2-default-rtdb.firebaseio.com/cart.json\",\n        {\n          method: \"PUT\",\n          body: JSON.stringify(cart),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed!\");\n      }\n    };\n\n    try {\n      await sendRequest();\n\n      dispatch(\n        cartActions.showNotification({\n          status: \"success\",\n          title: \"Success!\",\n          message: \"Sent cart data successfully!\",\n        })\n      );\n    } catch (error) {\n      dispatch(\n        cartActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Sending cart data failed!\",\n        })\n      );\n    }\n  };\n};\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}