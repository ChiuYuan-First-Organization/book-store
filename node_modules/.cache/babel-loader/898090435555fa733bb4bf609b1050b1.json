{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCartState = {\n  cartIsShown: false,\n  notification: null,\n  items: [],\n  changed: false\n};\nconst cartSlice = createSlice({\n  name: \"cartReducer\",\n  initialState: initialCartState,\n  reducers: {\n    cartToggle(state) {\n      state.cartIsShown = !state.cartIsShown;\n    },\n\n    showNotification(state, action) {\n      state.notification = action.payload;\n    },\n\n    replaceCart(state, action) {\n      state.items = action.payload;\n    },\n\n    addItem(state, action) {\n      const existingItem = state.items.find(i => i.title === action.payload.title);\n\n      if (existingItem) {\n        existingItem.quantity += action.payload.quantity;\n      } else {\n        state.items = [...state.items, action.payload];\n      }\n\n      state.changed = true;\n    },\n\n    removeItem(state, action) {\n      const existingItem = state.items.find(i => i.title === action.payload.title);\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(i => i.title !== action.payload.title);\n      } else {\n        existingItem.quantity--;\n      }\n\n      state.changed = true;\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/adam/Desktop/practice-react/practice3/src/store/cart.js"],"names":["createSlice","initialCartState","cartIsShown","notification","items","changed","cartSlice","name","initialState","reducers","cartToggle","state","showNotification","action","payload","replaceCart","addItem","existingItem","find","i","title","quantity","removeItem","filter","cartActions","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,WAAW,EAAE,KADU;AAEvBC,EAAAA,YAAY,EAAE,IAFS;AAGvBC,EAAAA,KAAK,EAAE,EAHgB;AAIvBC,EAAAA,OAAO,EAAE;AAJc,CAAzB;AAOA,MAAMC,SAAS,GAAGN,WAAW,CAAC;AAC5BO,EAAAA,IAAI,EAAE,aADsB;AAE5BC,EAAAA,YAAY,EAAEP,gBAFc;AAG5BQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACC,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACT,WAAN,GAAoB,CAACS,KAAK,CAACT,WAA3B;AACD,KAHO;;AAIRU,IAAAA,gBAAgB,CAACD,KAAD,EAAQE,MAAR,EAAgB;AAC9BF,MAAAA,KAAK,CAACR,YAAN,GAAqBU,MAAM,CAACC,OAA5B;AACD,KANO;;AAORC,IAAAA,WAAW,CAACJ,KAAD,EAAQE,MAAR,EAAgB;AACzBF,MAAAA,KAAK,CAACP,KAAN,GAAcS,MAAM,CAACC,OAArB;AACD,KATO;;AAURE,IAAAA,OAAO,CAACL,KAAD,EAAQE,MAAR,EAAgB;AACrB,YAAMI,YAAY,GAAGN,KAAK,CAACP,KAAN,CAAYc,IAAZ,CAClBC,CAAD,IAAOA,CAAC,CAACC,KAAF,KAAYP,MAAM,CAACC,OAAP,CAAeM,KADf,CAArB;;AAGA,UAAIH,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACI,QAAb,IAAyBR,MAAM,CAACC,OAAP,CAAeO,QAAxC;AACD,OAFD,MAEO;AACLV,QAAAA,KAAK,CAACP,KAAN,GAAc,CAAC,GAAGO,KAAK,CAACP,KAAV,EAAiBS,MAAM,CAACC,OAAxB,CAAd;AACD;;AACDH,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACD,KApBO;;AAqBRiB,IAAAA,UAAU,CAACX,KAAD,EAAQE,MAAR,EAAgB;AACxB,YAAMI,YAAY,GAAGN,KAAK,CAACP,KAAN,CAAYc,IAAZ,CAClBC,CAAD,IAAOA,CAAC,CAACC,KAAF,KAAYP,MAAM,CAACC,OAAP,CAAeM,KADf,CAArB;;AAGA,UAAIH,YAAY,CAACI,QAAb,KAA0B,CAA9B,EAAiC;AAC/BV,QAAAA,KAAK,CAACP,KAAN,GAAcO,KAAK,CAACP,KAAN,CAAYmB,MAAZ,CACXJ,CAAD,IAAOA,CAAC,CAACC,KAAF,KAAYP,MAAM,CAACC,OAAP,CAAeM,KADtB,CAAd;AAGD,OAJD,MAIO;AACLH,QAAAA,YAAY,CAACI,QAAb;AACD;;AACDV,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACD;;AAjCO;AAHkB,CAAD,CAA7B;AAwCA,OAAO,MAAMmB,WAAW,GAAGlB,SAAS,CAACmB,OAA9B;AAEP,eAAenB,SAAS,CAACoB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialCartState = {\n  cartIsShown: false,\n  notification: null,\n  items: [],\n  changed: false,\n};\n\nconst cartSlice = createSlice({\n  name: \"cartReducer\",\n  initialState: initialCartState,\n  reducers: {\n    cartToggle(state) {\n      state.cartIsShown = !state.cartIsShown;\n    },\n    showNotification(state, action) {\n      state.notification = action.payload;\n    },\n    replaceCart(state, action) {\n      state.items = action.payload;\n    },\n    addItem(state, action) {\n      const existingItem = state.items.find(\n        (i) => i.title === action.payload.title\n      );\n      if (existingItem) {\n        existingItem.quantity += action.payload.quantity;\n      } else {\n        state.items = [...state.items, action.payload];\n      }\n      state.changed = true;\n    },\n    removeItem(state, action) {\n      const existingItem = state.items.find(\n        (i) => i.title === action.payload.title\n      );\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(\n          (i) => i.title !== action.payload.title\n        );\n      } else {\n        existingItem.quantity--;\n      }\n      state.changed = true;\n    },\n  },\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}